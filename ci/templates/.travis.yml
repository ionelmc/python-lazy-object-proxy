language: python
dist: xenial
cache: false
env:
  global:
    - SEGFAULT_SIGNALS=all
    - TWINE_USERNAME=ionel
matrix:
  include:
    - python: '3.6'
      env:
        - TOXENV=check
    - python: '3.6'
      env:
        - TOXENV=docs
{%- for env in tox_environments %}{{ '' }}
{%- if 'py37' in env or 'py27' in env %}{{ '' }}
    - os: osx
      language: generic
      env:
        - TOXENV={{ env }}
{%- if 'nocov' in env %}{{ '' }}
        - WHEEL_PATH=.tox/dist
{%- endif %}
{%- endif %}{{ '' }}
{%- for arch in architecture %}{{ '' }}
{%- if 'arm64' not in arch or 'pypy' not in env %}{{ '' }}
    - arch: {{ arch }}
      env:
        - TOXENV={{ env }}{% if 'cover' in env %},codecov,extension-coveralls,coveralls{% endif %}
{%- if 'pypy' not in env and 'nocov' in env and 'arm64' not in arch %}{{ '' }}
        - WHEEL_MANYLINUX1=cp{{ env.split('-')[0][2:] }}
        - WHEEL_PATH=wheelhouse
{%- elif 'pypy' not in env and 'nocov' in env and 'arm64' in arch %}{{ '' }}
        - WHEEL_PATH=.tox/dist
{%- endif %}
{%- if env.startswith('pypy3') %}{{ '' }}
        - TOXPYTHON=pypy3
      python: 'pypy3'
{%- elif env.startswith('pypy') %}{{ '' }}
      python: 'pypy'
{%- else %}{{ '' }}
      python: '{{ '{0[2]}.{0[3]}'.format(env) }}'
{%- endif %}
{%- endif %}{{ '' }}
{%- endfor %}{{ '' }}
{%- endfor %}{{ '' }}
before_install:
  - |
    if [[ ${TRAVIS_CPU_ARCH} == "arm64" ]]; then
        export LD_PRELOAD=/lib/aarch64-linux-gnu/libSegFault.so
    else
        export LD_PRELOAD=/lib/x86_64-linux-gnu/libSegFault.so
    fi
  - python --version
  - uname -a
  - lsb_release -a || true
  - |
    if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
      brew update-reset
      [[ $TOXENV =~ py3 ]] && brew upgrade python
      [[ $TOXENV =~ py2 ]] && brew install python@2
      export PATH="/usr/local/opt/python/libexec/bin:${PATH}"
    fi
install:
  - python -mpip install --progress-bar=off twine tox-wheel -rci/requirements.txt
  - virtualenv --version
  - easy_install --version
  - pip --version
  - tox --version
script:
  - |
    (
    set -eux
    if [[ -n ${WHEEL_MANYLINUX1:-} ]]; then
      docker run --rm --user $UID -itv $(pwd):/code ionelmc/manylinux $WHEEL_MANYLINUX1
      tox --installpkg $WHEEL_PATH/*.whl -v
    else
      tox -v
    fi
    if [[ -n ${WHEEL_PATH:-} ]]; then
      if [[ ${TRAVIS_CPU_ARCH} == "arm64" ]]; then
         sudo apt-get install patchelf
         python3 -mpip install --progress-bar=off auditwheel
         python3 -m auditwheel repair $WHEEL_PATH/*.whl -w $WHEEL_PATH/
         rm -rf $WHEEL_PATH/*linux_aarch64.whl
      fi
      twine upload --repository-url https://test.pypi.org/legacy/ --skip-existing $WHEEL_PATH/*.whl
    fi
    )
after_failure:
  - cat .tox/log/*
  - cat .tox/*/log/*
notifications:
  email:
    on_success: never
    on_failure: always
